{"version":3,"file":"static/js/356.97831e67.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","pages/Movies.jsx","services/API.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchBar\":\"SearchBar_searchBar__rjQkX\",\"searchForm\":\"SearchBar_searchForm__V6XO6\",\"searchForm_button\":\"SearchBar_searchForm_button__74xgm\",\"searchForm_button_label\":\"SearchBar_searchForm_button_label__vQ9KH\",\"input\":\"SearchBar_input__bIy50\"};","import Notiflix from \"notiflix\";\nimport { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport css from './SearchBar.module.css'\nimport {BiSearch} from 'react-icons/bi'\n\nexport const SearchBar = ({ onSubmit }) => {\n    const [search, setSearch] = useState('');\n\n    const handleChange = e => {\n        setSearch(e.target.value.toLowerCase());\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (search.trim() === '') {\n            Notiflix.Notify.warning('Please enter your quest word');\n            return\n        }\n\n        onSubmit(search);\n        setSearch('');\n    }\n\n    return (\n      <div className={css.searchBar}>\n        <form onSubmit={handleSubmit} className={css.searchForm}>\n          <button type=\"submit\" className={css.searchForm_button}>\n            <BiSearch size={22} />\n            <span className={css.searchForm_button_label}></span>\n          </button>\n                <input\n                    className={css.input}\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            value={search}\n            onChange={handleChange}\n          />\n        </form>\n      </div>\n    );\n}\n\nSearchBar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__0Owr9\",\"item_text\":\"MoviesList_item_text__9rPGs\"};","import { NavLink } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css'\n\nexport const MoviesList = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n      <ul className={css.list}>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <li key={id} className={css.list_item}>\n              <NavLink to={`/movies/${id}`} state={{ from: location }}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={title}\n                />\n                <p className={css.item_text}>{title}</p>\n              </NavLink>\n            </li>\n          );\n        })}\n      </ul>\n    );\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            poster_path: PropTypes.string.isRequired,\n        })\n    ),\n};","import Notiflix from \"notiflix\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\"\nimport { useSearchParams } from \"react-router-dom\";\nimport { getMovies } from \"services/API\";\nimport { SearchBar } from \"components/SearchBar/SearchBar\";\nimport { MoviesList } from \"components/MoviesList/MoviesList\";\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [query, setQuery] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchWords = searchParams.get('data') ?? '';\n\n\n\n    const onHandleSubmit = data => {\n        setQuery(data);\n        setMovies([]);\n        setSearchParams(data !== '' ? {data} : {})\n    }\n\n    useEffect(() => {\n        if ( !query && !searchWords) {\n            return;\n        }\n\n        async function downloadMovies() {\n            try {\n                const movies = await getMovies(\n                  searchWords ? searchWords : query\n                );\n                if (movies.length === 0) {\n                    Notiflix.Notify.failure('Sorry, your quest has no result!')\n                }\n                setMovies(movies);\n            } catch (error) {\n                \n            }\n        }\n\n        downloadMovies()\n    }, [query, searchWords])\n\n    return (\n      <main>\n        <SearchBar onSubmit={onHandleSubmit} />\n        {movies && <MoviesList movies={movies} />}\n      </main>\n    );\n\n\n}\n\nexport default Movies;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '64afbe7e98104731aad90684412bb048';\n\nexport const getTrendingMovies = async () => {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        }\n    }\n\n    const response = await axios.get('/trending/movie/day', options);\n    return response.data.results;\n}\n\nexport const getMovies = async query => {\n    const options = {\n        params: {\n            api_key: API_KEY,\n            query,\n        }\n    }\n\n    const response = await axios.get('/search/movie', options)\n    return response.data.results;\n}\n\nexport const getMovieDetails = async movie_id => {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        }\n    }\n\n    const response = await axios.get(`/movie/${movie_id}`, options)\n    return response.data;\n}\n\nexport const getMovieCast = async movieId => {\n    const options = {\n        params: {\n            api_key:API_KEY,\n        }\n    }\n\n    const response = await axios.get(`/movie/${movieId}/credits`, options);\n    return response.data.cast;\n}\n\nexport const getMovieReviews = async movieId => {\n    const options = {\n        params: {\n            api_key: API_KEY,\n        }\n    }\n\n    const response = await axios.get(`/movie/${movieId}/reviews`, options);\n    return response.data.results;\n}"],"names":["SearchBar","onSubmit","useState","search","setSearch","className","css","e","preventDefault","trim","Notiflix","type","size","autoComplete","autoFocus","placeholder","value","onChange","target","toLowerCase","MoviesList","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","setMovies","query","setQuery","useSearchParams","searchParams","setSearchParams","searchWords","get","useEffect","getMovies","length","downloadMovies","data","axios","API_KEY","getTrendingMovies","options","params","api_key","response","results","getMovieDetails","movie_id","getMovieCast","movieId","cast","getMovieReviews"],"sourceRoot":""}